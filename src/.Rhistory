labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
# --------------------------------------------------------------------------------------------------------------------------
# create an empty vector to contain state minimum alphas...
states_lenient_smaller_alpha <- vector()
# --------------------------------------------------------------------------------------------------------------------------
# populate empty vector...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.10"
}
else {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- ">= 0.10"
}
}
# --------------------------------------------------------------------------------------------------------------------------
# create a data.frame to be used in a heat map plot...
states_lenient_smaller_alpha_df <- data.frame(
states = state.name,
fips = fips,
level_of_significance = states_lenient_smaller_alpha
)
# --------------------------------------------------------------------------------------------------------------------------
# plot a heat map using the states_lenient_smaller_alpha data.frame...
plot_usmap(data = states_lenient_smaller_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#8f556733",
"< 0.05" = "#8f556788",
"< 0.01" = "#8f5567dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Smaller Mean)")
# --------------------------------------------------------------------------------------------------------------------------
# create ggplot object for NY...
i <- ggplot(data = NY,
mapping = aes(x = date))
# --------------------------------------------------------------------------------------------------------------------------
# create time series plot for NY...
i + geom_line(aes(y = daily_cases / 100,
col = "Daily Cases / 100",
linetype = "Daily Cases / 100",
size = "Daily Cases / 100")) +
geom_line(aes(y = daily_deaths,
col = "Daily Deaths",
linetype = "Daily Deaths",
size = "Daily Deaths")) +
geom_line(aes(y = stringency_index,
col = "Stringency Index",
linetype = "Stringency Index",
size = "Stringency Index")) +
scale_color_manual(name = "Series",
values = c("Daily Cases / 100" = "purple",
"Daily Deaths" = "red",
"Stringency Index" = "green")) +
scale_linetype_manual(name = "Series",
values = c("Daily Cases / 100" = 1,
"Daily Deaths" = 2,
"Stringency Index" = 1)) +
scale_size_manual(name = "Series",
values = c("Daily Cases / 100" = 0.5,
"Daily Deaths" = 0.5,
"Stringency Index" = 1)) +
labs(title = "New York Time Series Analysis",
x = "Date", y = "Series Value") +
guides(fill = guide_legend(title = "Series")) +
theme_linedraw()
# --------------------------------------------------------------------------------------------------------------------------
# create ggplot object for LA...
i <- ggplot(data = LA,
mapping = aes(x = date))
# --------------------------------------------------------------------------------------------------------------------------
# create time series plot for LA...
i + geom_line(aes(y = daily_cases / 100,
col = "Daily Cases / 100",
linetype = "Daily Cases / 100",
size = "Daily Cases / 100")) +
geom_line(aes(y = daily_deaths,
col = "Daily Deaths",
linetype = "Daily Deaths",
size = "Daily Deaths")) +
geom_line(aes(y = stringency_index,
col = "Stringency Index",
linetype = "Stringency Index",
size = "Stringency Index")) +
scale_color_manual(name = "Series",
values = c("Daily Cases / 100" = "purple",
"Daily Deaths" = "red",
"Stringency Index" = "green")) +
scale_linetype_manual(name = "Series",
values = c("Daily Cases / 100" = 1,
"Daily Deaths" = 2,
"Stringency Index" = 1)) +
scale_size_manual(name = "Series",
values = c("Daily Cases / 100" = 0.5,
"Daily Deaths" = 0.5,
"Stringency Index" = 1)) +
labs(title = "Louisiana Time Series Analysis",
x = "Date", y = "Series Value") +
guides(fill = guide_legend(title = "Series")) +
theme_linedraw()
# --------------------------------------------------------------------------------------------------------------------------
# create ggplot object for HI...
i <- ggplot(data = HI,
mapping = aes(x = date))
# --------------------------------------------------------------------------------------------------------------------------
# create time series plot for HI...
i + geom_line(aes(y = daily_cases / 100,
col = "Daily Cases / 100",
linetype = "Daily Cases / 100",
size = "Daily Cases / 100")) +
geom_line(aes(y = daily_deaths,
col = "Daily Deaths",
linetype = "Daily Deaths",
size = "Daily Deaths")) +
geom_line(aes(y = stringency_index,
col = "Stringency Index",
linetype = "Stringency Index",
size = "Stringency Index")) +
scale_color_manual(name = "Series",
values = c("Daily Cases / 100" = "purple",
"Daily Deaths" = "red",
"Stringency Index" = "green")) +
scale_linetype_manual(name = "Series",
values = c("Daily Cases / 100" = 1,
"Daily Deaths" = 2,
"Stringency Index" = 1)) +
scale_size_manual(name = "Series",
values = c("Daily Cases / 100" = 0.5,
"Daily Deaths" = 0.5,
"Stringency Index" = 1)) +
labs(title = "Hawaii Time Series Analysis",
x = "Date", y = "Series Value") +
guides(fill = guide_legend(title = "Series")) +
theme_linedraw()
# ==========================================================================================================================
# End of Code
# ==========================================================================================================================
# create histogram using concentrations for each state...
k <- ggplot(data = state_concs_df,
aes(x = "concentration")) +
geom_histogram(binwidth = 0.02, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
# delete all existing environment variables...
rm(list = ls())
# load all installed libraries...
library(COVID19)
library(sf)
library(tigris)
library(tidycensus)
library(mapview)
library(usmap)
library(ggplot2)
library(usmap)
library(data.table)
library(data.table)
USA <- covid19(country = "United States", level = 2, verbose = FALSE)
# --------------------------------------------------------------------------------------------------------------------------
# view the first 100 entries in the USA data.frame...
View(USA[1:100, ])
# --------------------------------------------------------------------------------------------------------------------------
# convert the USA data.frame to a data.table...
setDT(USA)
# --------------------------------------------------------------------------------------------------------------------------
# determine the class of the date stored in the "date" feature of the USA data.table...
USA[, class(date)]
# --------------------------------------------------------------------------------------------------------------------------
# create a feature called "weekday" to store the day of the week for each record...
USA[, weekday := weekdays(date)]
# --------------------------------------------------------------------------------------------------------------------------
# view the first 100 records in the "date", "weekday", and "confirmed" features of the USA data.table as a data.table...
View(USA[1:100, .(date, weekday, confirmed)])
# --------------------------------------------------------------------------------------------------------------------------
# view a table based on state...
USA[, table(administrative_area_level_2, useNA = "ifany")]
# --------------------------------------------------------------------------------------------------------------------------
# rename the "administrative_area_level_2" feature to "state"...
setnames(USA, old = "administrative_area_level_2", "state_name")
# --------------------------------------------------------------------------------------------------------------------------
# set the "state" and "date" features as keys in the USA data.table...
setkeyv(USA, cols = c("state_name", "date"))
# --------------------------------------------------------------------------------------------------------------------------
# make sure the "state" and "date" features were added as keys...
key(USA)
# --------------------------------------------------------------------------------------------------------------------------
# create a feature called "previous" to be used in calculating daily confirmed cases...
USA[, previous := shift(confirmed, n = 1, type = "lag", fill = NA_integer_), by = state_name]
# --------------------------------------------------------------------------------------------------------------------------
# create a feature called "daily_cases" by subtracting "previous" from confirmed...
USA[, daily_cases := confirmed - previous]
# --------------------------------------------------------------------------------------------------------------------------
# view New York COVID data to make sure the daily_cases feature was calculated correctly...
View(USA[state_name == "New York", ])
# --------------------------------------------------------------------------------------------------------------------------
# erase the previous feature we used for calculating daily_cases...
USA[, previous := NULL]
# --------------------------------------------------------------------------------------------------------------------------
# slice the USA data.table to only include data from the year 2021...
USA <- USA[date >= "2021-01-01" & date <= "2021-12-31", ]
# --------------------------------------------------------------------------------------------------------------------------
# create a vector containing the integers in the interval [1, 50]...
state_indices <- c(1:50)
# --------------------------------------------------------------------------------------------------------------------------
# create variables for each state using a built-in R package and a for loop...
for (index in state_indices) {
assign(state.abb[index], USA[state_name == state.name[index]])
}
# --------------------------------------------------------------------------------------------------------------------------
# use another loop to create concentration variables for each state...
for (index in state_indices) {
assign(paste(state.abb[index], "conc", sep = "_"),
sum(get(state.abb[index])$daily_cases) / (sum(get(state.abb[index])$population) / 365))
}
# --------------------------------------------------------------------------------------------------------------------------
# create a vector to represent the US state FIPS codes...
fips <- c(1:56)
# --------------------------------------------------------------------------------------------------------------------------
# drop some of the numbers without any associated states...
fips <- fips[! fips %in% c('3','7','11','14','43','52')]
# --------------------------------------------------------------------------------------------------------------------------
# create a an empty vector...
state_concs <- vector()
# --------------------------------------------------------------------------------------------------------------------------
# populate the empty vector with each state's concentrations using a for loop...
for (index in state_indices) {
state_concs[length(state_concs) + 1] <- get(paste(state.abb[index], "conc", sep = "_"))
}
# --------------------------------------------------------------------------------------------------------------------------
# make a copy of the state_concs vector...
state_concs_copy <- state_concs
# --------------------------------------------------------------------------------------------------------------------------
# find the five states with the most COVID-19 cases as a proportion of their populations (sort in decreasing order)...
head(sort(state_concs_copy, decreasing = TRUE), 5)
# --------------------------------------------------------------------------------------------------------------------------
# find the five states with the least COVID-19 cases as a proportion of their populations (resort in increasing order)...
head(sort(state_concs_copy, decreasing = FALSE), 5)
# --------------------------------------------------------------------------------------------------------------------------
# calculate the average/mean concentration of COVID-19 cases for the entire US (considering all state concentrations)...
mean_conc <- mean(state_concs)
# --------------------------------------------------------------------------------------------------------------------------
# calculate the median concentration of COVID-19 cases for the entire US (considering all state concentrations)...
median_conc <- median(state_concs)
# --------------------------------------------------------------------------------------------------------------------------
# calculate the standard deviation of the US COVID-19 concentration distribution (considering all state concentrations)...
std_dev_conc <- sd(state_concs)
# --------------------------------------------------------------------------------------------------------------------------
# create a data.frame object for the data we worked with...
state_concs_df <- data.frame(
state = state.name,
fips = fips,
concentration = state_concs
)
# --------------------------------------------------------------------------------------------------------------------------
# view the previously defined data.frame object...
View(state_concs_df)
# --------------------------------------------------------------------------------------------------------------------------
# create a heat map using the previously defined data.frame object...
plot_usmap(data = state_concs_df,
values = "concentration",
labels = TRUE,
size = 0.5) +
scale_fill_continuous(low = "white",
high = "dodgerblue",
name = "COVID-19 Concentration") +
theme(legend.position = "right") +
labs(title = "State COVID-19 Concentrations (2021)")
# --------------------------------------------------------------------------------------------------------------------------
# create histogram using concentrations for each state...
k <- ggplot(data = state_concs_df,
aes(x = "concentration")) +
geom_histogram(binwidth = 0.02, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
# create histogram using concentrations for each state...
k <- ggplot(data = state_concs_df,
aes(x = "concentration")) +
geom_histogram(binwidth = 0.02, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
# create ggplot object with state_concs_df...
k <- ggplot(data = state_concs_df,
aes(x = "concentration"))
k + geom_histogram(binwidth = 0.02, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 2, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
# create ggplot object with state_concs_df...
k <- ggplot(data = state_concs_df,
aes(x = concentration))
k + geom_histogram(binwidth = 2, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 0.02, aes(fill = "dodgerblue")) +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 0.02, color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 0.02, fill = "dodgerblue") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 0.02, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.1)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.01)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.015, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.01)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.015, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.015)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.015, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.015)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.015, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.015)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.015, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.01)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.01)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations Histogram (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.05, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.01, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(binwidth = 0.02, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 9, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 9, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 8, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.05, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, binwidth = 1, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.05, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.05, 0.15, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.15, 0.01)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.01)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
scale_y_continuous(breaks = seq(0, 16, 2))
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
scale_y_continuous(breaks = seq(0, 16, 2)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
scale_y_continuous(breaks = seq(0, 16, 2)) +
theme_linedraw()
k + geom_histogram(bins = 10, fill = "dodgerblue", color = "black") +
labs(title = "State COVID-19 Concentrations (2021)",
x= "Concentration", y = "Frequency") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
scale_y_continuous(breaks = seq(0, 14, 2)) +
theme_linedraw()
# create density function of concentrations...
k + geom_density(color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
# create density function of concentrations...
k + geom_density(aes(y = ..density..), color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
# create density function of concentrations...
k + geom_density(aes(y = ..density..), color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
# create density function of concentrations...
k + stat_density(aes(y = ..density..), color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
# create density function of concentrations...
k + stat_density(color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
# create density function of concentrations...
k + geom_density(color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
# create density function of concentrations...
k + geom_density(aes(y = ..density..), color = "dodgerblue") +
labs(title = "State COVID-19 Concentrations (2021)",
x = "Concentration", y = "Density") +
scale_x_continuous(breaks = seq(0.06, 0.14, 0.02)) +
theme_linedraw()
