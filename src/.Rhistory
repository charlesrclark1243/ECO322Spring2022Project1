"Daily Deaths" = "red",
"Stringency Index" = "green")) +
scale_linetype_manual(name = "Series",
values = c("Daily Cases / 100" = 1,
"Daily Deaths" = 2,
"Stringency Index" = 1)) +
scale_size_manual(name = "Series",
values = c("Daily Cases / 100" = 0.5,
"Daily Deaths" = 0.5,
"Stringency Index" = 1)) +
labs(title = "Hawaii Time Series Analysis",
x = "Date", y = "Series Value") +
guides(fill = guide_legend(title = "Series")) +
theme_linedraw()
library(data.table)
library(COVID19)
library(ggplot2)
library(data.table)
for (index in state_indices) {
print(paste(state.abb[index], state.name[index], sep = " ----> "))
}
# define an empty vector to contain 2-sided minimum levels of significance for each state...
states_diff_alphas <- vector()
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.10"
}
else {
states_diff_alpha[length(states_diff_alphas) + 1] <- ">= 0.10"
}
}
# define an empty vector to contain 2-sided minimum levels of significance for each state...
states_diff_alpha <- vector()
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.10"
}
else {
states_diff_alpha[length(states_diff_alphas) + 1] <- ">= 0.10"
}
}
# define an empty vector to contain 2-sided minimum levels of significance for each state...
states_diff_alpha <- vector()
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.10"
}
else {
states_diff_alpha[length(states_diff_alphas) + 1] <- ">= 0.10"
}
}
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
states_diff_alpha[length(states_diff_alphas) + 1] <- "< 0.10"
}
else {
states_diff_alpha[length(states_diff_alphas) + 1] <- ">= 0.10"
}
}
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
states_diff_alpha[length(states_diff_alpha) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
states_diff_alpha[length(states_diff_alpha) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
states_diff_alpha[length(states_diff_alpha) + 1] <- "< 0.10"
}
else {
states_diff_alpha[length(states_diff_alpha) + 1] <- ">= 0.10"
}
}
# define an empty vector to contain 2-sided minimum levels of significance for each state...
states_diff_alpha <- vector()
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
states_diff_alpha[length(states_diff_alpha) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
states_diff_alpha[length(states_diff_alpha) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
states_diff_alpha[length(states_diff_alpha) + 1] <- "< 0.10"
}
else {
states_diff_alpha[length(states_diff_alpha) + 1] <- ">= 0.10"
}
}
# create a data.frame to be used in a heat map plot...
states_diff_alpha_df <- data.frame(
states = state.name,
fips = z,
level_of_significance = states_diff_alpha
)
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "levels_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Level of Significance",
value = c(">= 0.10" = "white",
"< 0.10" = "#ff559955",
"< 0.05" = "#ff5599aa",
"< 0.01" = "#ff5599ff"))
library(sf)
library(tigris)
library(tidycensus) # official US state, county boundaries...
library(mapview)
library(usmap)
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "levels_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Level of Significance",
value = c(">= 0.10" = "white",
"< 0.10" = "#ff559955",
"< 0.05" = "#ff5599aa",
"< 0.01" = "#ff5599ff"))
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Level of Significance",
value = c(">= 0.10" = "white",
"< 0.10" = "#ff559955",
"< 0.05" = "#ff5599aa",
"< 0.01" = "#ff5599ff"))
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Level of Significance",
values = c(">= 0.10" = "white",
"< 0.10" = "#ff559955",
"< 0.05" = "#ff5599aa",
"< 0.01" = "#ff5599ff"))
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Level of Significance",
values = c(">= 0.10" = "white",
"< 0.10" = "#ff552233",
"< 0.05" = "#ff552288",
"< 0.01" = "#ff5522cc")) +
theme(legend.position = "right") +
labs(title = "Statistical Significances of Lenient-Strict Mean Difference")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#ff552233",
"< 0.05" = "#ff552288",
"< 0.01" = "#ff5522cc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#aa552233",
"< 0.05" = "#aa552288",
"< 0.01" = "#aa5522cc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#aa55dd33",
"< 0.05" = "#aa55dd88",
"< 0.01" = "#aa55ddcc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#2255dd33",
"< 0.05" = "#2255dd88",
"< 0.01" = "#2255ddcc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#7755dd33",
"< 0.05" = "#7755dd88",
"< 0.01" = "#7755ddcc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#77f5dd33",
"< 0.05" = "#77f5dd88",
"< 0.01" = "#77f5ddcc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#77f59d33",
"< 0.05" = "#77f59d88",
"< 0.01" = "#77f59dcc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
View(TN_strict_smaller_mean_ttest_obj)
# create an empty vector to contain state minimum alphas...
states_lenient_larger_alpha <- vector()
# populate empty vector...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
states_lenient_larger_alpha[length(states_lenient_larger_alpha) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
states_lenient_larger_alpha[length(states_lenient_larger_alpha) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
states_lenient_larger_alpha[length(states_lenient_larger_alpha) + 1] <- "< 0.10"
}
else {
states_lenient_larger_alpha[length(states_lenient_larger_alpha) + 1] <- ">= 0.10"
}
}
# create a data.frame to be used in a heat map plot...
states_lenient_larger_alpha_df <- data.frame(
states = state.name,
fips = z,
level_of_significance = states_lenient_larger_alpha
)
# plot a heat map using the states_lenient_larger_alpha data.frame...
plot_usmap(data = states_lenient_larger_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#4596f333",
"< 0.05" = "#4596f388",
"< 0.01" = "#4596f3cc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (1-sided, Lenient Larger Mean)")
# plot a heat map using the states_lenient_larger_alpha data.frame...
plot_usmap(data = states_lenient_larger_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#4596f333",
"< 0.05" = "#4596f388",
"< 0.01" = "#4596f3cc")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
# plot a heat map using the states_lenient_larger_alpha data.frame...
plot_usmap(data = states_lenient_larger_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#4596f333",
"< 0.05" = "#4596f388",
"< 0.01" = "#4596f3dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
View(TN_strict_smaller_mean_ttest_obj)
View(TN_strict_smaller_mean_ttest_obj)
View(TN_strict_larger_mean_ttest_obj)
# plot a heat map using the states_diff_alpha_df data.frame...
plot_usmap(data = states_diff_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#77f59d33",
"< 0.05" = "#77f59d88",
"< 0.01" = "#77f59ddd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance (2-sided)")
# plot a heat map using the states_lenient_larger_alpha data.frame...
plot_usmap(data = states_lenient_larger_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#4596f333",
"< 0.05" = "#4596f388",
"< 0.01" = "#4596f3dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
# create an empty vector to contain state minimum alphas...
states_lenient_smaller_alpha <- vector()
# populate empty vector...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.10"
}
else {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- ">= 0.10"
}
}
# create a data.frame to be used in a heat map plot...
states_lenient_smaller_alpha_df <- data.frame(
states = state.name,
fips = z,
level_of_significance = states_lenient_smaller_alpha
)
# plot a heat map using the states_lenient_smaller_alpha data.frame...
plot_usmap(data = states_lenient_larger_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#34f56533",
"< 0.05" = "#34f56588",
"< 0.01" = "#34f565dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
# plot a heat map using the states_lenient_smaller_alpha data.frame...
plot_usmap(data = states_lenient_smaller_alpha,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#8f556733",
"< 0.05" = "#8f556788",
"< 0.01" = "#8f5567dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
# create an empty vector to contain state minimum alphas...
states_lenient_smaller_alpha <- vector()
# populate empty vector...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.01"
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.05"
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- "< 0.10"
}
else {
states_lenient_smaller_alpha[length(states_lenient_smaller_alpha) + 1] <- ">= 0.10"
}
}
# create a data.frame to be used in a heat map plot...
states_lenient_smaller_alpha_df <- data.frame(
states = state.name,
fips = z,
level_of_significance = states_lenient_smaller_alpha
)
# plot a heat map using the states_lenient_smaller_alpha data.frame...
plot_usmap(data = states_lenient_smaller_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#8f556733",
"< 0.05" = "#8f556788",
"< 0.01" = "#8f5567dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Larger Mean)")
# plot a heat map using the states_lenient_smaller_alpha data.frame...
plot_usmap(data = states_lenient_smaller_alpha_df,
values = "level_of_significance",
labels = FALSE) +
scale_fill_manual(name = "Minimum Alpha",
values = c(">= 0.10" = "white",
"< 0.10" = "#8f556733",
"< 0.05" = "#8f556788",
"< 0.01" = "#8f5567dd")) +
theme(legend.position = "right") +
labs(title = "Minimum Levels of Significance\n(1-sided, Lenient Smaller Mean)")
"usmap"
for (index in state_indices) {
print(paste(index, state.abb[index], ssep = " ----> "))
}
print(paste(index, state.abb[index], sep = " ----> "))
for (index in state_indices) {
print(paste(index, state.abb[index], sep = " ----> "))
}
for (f in fips) {
print(fips)
}
# create a vector to represent the US state FIPS codes...
fips <- c(1:56)
# drop some of the numbers without any associated states...
fips <- fips[! fips %in% c('3','7','11','14','43','52')]
for (f in fips) {
print(f)
}
print(c("2020-12-13":"2022-02-02"))
print(seq(as.Date("2020/12/13"), as.Date("2022/02/02"), by = "day"))
# delete all existing environment variables...
rm(list = ls())
# install all necessary libraries (if not already installed)...
install.packages(c("COVID19", "data.table", "sf", "tigris", "tidycensus", "mapview", "usmap", "ggplot2"))
install.packages(c("COVID19", "data.table", "sf", "tigris", "tidycensus", "mapview", "usmap", "ggplot2"))
# load all installed libraries...
library(COVID19)
library(data.table)
library(data.table)
library(sf)
library(tigris)
library(tidycensus)
library(mapview)
library(usmap)
library(ggplot2)
# store USA COVID-19 data into a data.frame object...
USA <- covid19(country = "United States", level = 2, verbose = FALSE)
# view the first 100 entries in the USA data.frame...
View(USA[1:100, ])
# convert the USA data.frame to a data.table...
setDT(USA)
# determine the class of the date stored in the "date" feature of the USA data.table...
USA[, class(date)]
# create a feature called "weekday" to store the day of the week for each record...
USA[, weekday := weekdays(date)]
# view the first 100 records in the "date", "weekday", and "confirmed" features of the USA data.table as a data.table...
View(USA[1:100, .(date, weekday, confirmed)])
# ???? (Comment after running)...
USA[, .table(administrative_area_level_2, useNA = "ifany")]
# ???? (Comment after running)...
USA[, table(administrative_area_level_2, useNA = "ifany")]
# rename the "administrative_area_level_2" feature to "state"...
setnames(USA, old = "administrative_area_level_2", "state")
# set the "state" and "date" features as keys in the USA data.table...
setkeyv(USA, cols = c("state", "date"))
# make sure the "state" and "date" features were added as keys...
key(USA)
# create a feature called "previous" to be used in calculating daily confirmed cases...
USA[, previous := shift(confirmed, n = 1, type = "lag", fill = NA_integer_), by = state]
# create a feature called "daily_cases" by subtracting "previous" from confirmed...
USA[, daily_cases := confirmed - previous]
# view New York covid data to make sure the daily_cases feature was calculated correctly...
View(USA[state == "New York", ])
# erase the previous feature we used for calculating daily_cases...
USA[, previous := NULL]
# slice the USA data.table to only include data from the year 2021...
USA <- USA[date >= "2021-01-01" & date <= "2021-12-31", ]
# create a vector containing the integers in the interval [1, 50]...
state_indices <- c(1:50)
# create variables for each state using a built-in R package and a for loop...
for (index in state_indices) {
assign(state.abb[index], USA[state == state.name(index)])
}
assign(state.abb[index], USA[state == state.names(index)])
# create variables for each state using a built-in R package and a for loop...
for (index in state_indices) {
# create variables for each state using a built-in R package and a for loop...
for (index in state_indices) {
assign(state.abb[index], USA[state == state.name[index]])
}
# create variables for each state using a built-in R package and a for loop...
for (index in state_indices) {
assign(state.abb[index], USA[state == state.name[index]])
}
# create variables for each state using a built-in R package and a for loop...
for (index in state_indices) {
assign(state.abb[index], USA[state == state.name[index]])
}
# delete all existing environment variables...
rm(list = ls())
# delete all existing environment variables...
rm(list = ls())
