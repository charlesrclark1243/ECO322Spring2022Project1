get(paste(state.abb[index], "strict", sep = "_"))$daily_cases
))
}
library(COVID19)
library(data.table)
library(ggplot2)
USA <- covid19( country = c("United States") , level = 2, verbose = FALSE)
setDT(USA)
is.data.table(USA)
# rename...
setnames(USA, c("administrative_area_level_2"), c("state"))
# keys...
setkeyv(USA, c("state", "date"))
key(USA)
# create n=1 lagged feature using confirmed cases for each state...
USA[, previous := shift(confirmed, 1, fill = NA_integer_), by = state]
# create daily_cases feature by subtracting previous from current...
USA[, daily_cases := confirmed - previous]
# delete lagged feature...
USA[, previous := NULL]
USA <- USA[, c("date", "state", "daily_cases", "stringency_index")]
USA <- USA[date>="2021-01-01" & date<="2021-12-31", ]
USA <- USA[daily_cases >= 0]
state_indices <- c(1:50)
# use built-in R packages to create data.tables for each state, using the...
# vector of numbers 1:50 to do so in a for loop...
for (index in state_indices) {
assign(state.abb[index], USA[state == state.name[index]])
}
# ---------------------------------------------------------------------------------------------
# make sure each state has an average stringency index...
for (index in state_indices) {
state_ptr <- get(state.abb[index])
print(paste(state.name[index], mean(state_ptr$stringency_index), sep = " ----> " ))
}
# it looks like Louisiana, Maryland, and Rhode Island have NA average stringency indices...
# we should look at these sets individually...
# start with Louisiana...
# get indices of NA records for Louisiana...
LA_na_indices <- which(is.na(LA$stringency_index), arr.ind = TRUE)
# there seems to be only one NA record, so we only need to interpolate once...
# replace NA record using mean of stringency_index values for 15 days before and after...
# day with NA record for stringency_index...
LA$stringency_index[LA_na_indices] = mean(LA$stringency_index[LA_na_indices - 15:LA_na_indices + 15], na.rm = TRUE)
# check if we were successful...
any(is.na(LA$stringency_index)) # should print FALSE...
# next up is Maryland...
# get indices of NA records for Maryland...
MD_na_indices <- which(is.na(MD$stringency_index), arr.ind = TRUE)
# Maryland has multiple NA records, however they all seem to be grouped consecutively...
# we can interpolate each NA record using the mean stringency_index for the 15 days...
# before the first NA record and the 15 days after the last NA record...
# store indices of first and last NA records...
MD_na_first <- MD_na_indices[1]
MD_na_last <- MD_na_indices[length(MD_na_indices)]
# interpolate...
for (index in MD_na_indices) {
MD$stringency_index[index] = mean(MD$stringency_index[MD_na_first - 15:MD_na_last + 15], na.rm = TRUE)
}
# check if we were successful...
any(is.na(MD$stringency_index)) # should print FALSE...
# finally moving onto Rhode Island...
# get NA indices for Rhode Island stringency index...
RI_na_indices <- which(is.na(RI$stringency_index), arr.ind = TRUE)
# it looks like Rhode Island has multiple NA stringency indices...
# but they're all clumped together as well...
# let's repeat the process we followed for Maryland...
# store indices of first and last NA records...
RI_na_first <- RI_na_indices[1]
RI_na_last <- RI_na_indices[length(RI_na_indices)]
# interpolate...
for (index in RI_na_indices) {
RI$stringency_index[index] = mean(RI$stringency_index[RI_na_first - 15:RI_na_last + 15], na.rm = TRUE)
}
# check if we were successful...
any(is.na(RI$stringency_index)) # should print FALSE...
# define function to create a catgeorical varaible in a given data.table...
# (assumes the passed data.table was already initialized and defined OUTSIDE the function)...
# stringency_category values are assigned to each record after comparing the record's...
# stringency_index to the average stringency_index for the passed data.table...
create_stringency_category <- function(state_dt) {
stringency_category_vector <- vector()
for (index in c(1:length(state_dt$stringency_index))) {
print(index)
if (state_dt$stringency_index[index] <= mean(state_dt$stringency_index)) {
stringency_category_vector[length(stringency_category_vector) + 1] <- "Less than or Equal to Average"
}
else {
stringency_category_vector[length(stringency_category_vector) + 1] <- "Greater than Average"
}
}
setDT(state_dt)
print(stringency_category_vector)
state_dt[, stringency_category := stringency_category_vector]
return (state_dt)
}
# create lenient and strict data.tables for each state, based on the values...
# is each record's stringency_category value...
for (index in state_indices) {
assign(state.abb[index], create_stringency_category(get(state.abb[index])))
assign(paste(state.abb[index], "lenient", sep = "_"),
setDT(get(state.abb[index])[stringency_category == "Less than or Equal to Average"]))
assign(paste(state.abb[index], "strict", sep = "_"),
setDT(get(state.abb[index])[stringency_category == "Greater than Average"]))
}
difference_states_small_alpha <- vector()
difference_states_middle_alpha <- vector()
difference_states_large_alpha <- vector()
no_difference_states <- vector()
# loop through each state and perform the 2-sided t tests mentioned above...
for (index in state_indices) {
assign(paste(state.abb[index], "diff_ttest_obj", sep = "_"),
t.test(
get(paste(state.abb[index], "lenient", sep = "_"))$daily_cases,
get(paste(state.abb[index], "strict", sep = "_"))$daily_cases
))
}
# loop through each state's t_test objects and populate the three alpha vectors...
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
difference_states_large_alpha[len(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[len(difference_states_middle_alpha) + 1] <- state.abb[index]
difference_states_small_alpha[len(difference_states_small_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
difference_states_large_alpha[len(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[len(difference_states_middle_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
difference_states_large_alpha[len(difference_states_large_alpha) + 1] <- state.abb[index]
}
else {
no_difference_states[len(no_difference_states) + 1] <- state.abb[index]
}
}
# loop through each state's t_test objects and populate the three alpha vectors...
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
difference_states_large_alpha[len(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[len(difference_states_middle_alpha) + 1] <- state.abb[index]
difference_states_small_alpha[len(difference_states_small_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
difference_states_large_alpha[len(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[len(difference_states_middle_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
difference_states_large_alpha[len(difference_states_large_alpha) + 1] <- state.abb[index]
}
else {
no_difference_states[length(no_difference_states) + 1] <- state.abb[index]
}
}
# loop through each state's t_test objects and populate the three alpha vectors...
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
difference_states_large_alpha[length(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[length(difference_states_middle_alpha) + 1] <- state.abb[index]
difference_states_small_alpha[length(difference_states_small_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
difference_states_large_alpha[length(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[length(difference_states_middle_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
difference_states_large_alpha[length(difference_states_large_alpha) + 1] <- state.abb[index]
}
else {
no_difference_states[length(no_difference_states) + 1] <- state.abb[index]
}
}
difference_states_small_alpha <- vector()
difference_states_middle_alpha <- vector()
difference_states_large_alpha <- vector()
no_difference_states <- vector()
# loop through each state's t_test objects and populate the three alpha vectors...
for (index in state_indices) {
if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.01) {
difference_states_large_alpha[length(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[length(difference_states_middle_alpha) + 1] <- state.abb[index]
difference_states_small_alpha[length(difference_states_small_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.05) {
difference_states_large_alpha[length(difference_states_large_alpha) + 1] <- state.abb[index]
difference_states_middle_alpha[length(difference_states_middle_alpha) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "diff_ttest_obj", sep = "_"))$p.value < 0.10) {
difference_states_large_alpha[length(difference_states_large_alpha) + 1] <- state.abb[index]
}
else {
no_difference_states[length(no_difference_states) + 1] <- state.abb[index]
}
}
# calculate alpha = 0.01 (low) percentage of states with difference...
diff_low_percentage <- length(diff_states_low) / 50.0
# calculate alpha = 0.05 (mid) percentage of states with difference...
diff_mid_percentage <- length(diff_states_mid) / 50.0
# calculate alpha = 0.10 (high) percentage of states with difference...
diff_high_percentage <- length(diff_states_high) / 50.0
# calculate alpha = 0.01 (low) percentage of states with difference...
diff_small_alpha_percentage <- length(difference_states_small_alpha) / 50.0
# calculate alpha = 0.05 (mid) percentage of states with difference...
diff_middle_alpha_percentage <- length(difference_states_middle_alpha) / 50.0
# calculate alpha = 0.10 (high) percentage of states with difference...
diff_large_alpha_percentage <- length(difference_states_large_alpha) / 50.0
print(paste("Percentage of US states with significant difference at alpha = 0.01:",
diff_small_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with significant difference at alpha = 0.05:",
diff_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with significant difference at alpha = 0.10:",
diff_large_alpha_percentage,
sep = " "))
# create New York ggplot object...
f <- ggplot(data = NY, aes(x = NY$stringency_category,
y = NY$daily_cases))
# create box plot for New York...
f + geom_boxplot(fill = "#0099ffbb") +
labs(x = "Stringency Category",
y = "Daily Cases",
title = "New York Strigency Comparison") +
theme_linedraw()
# create violin plot for New York...
f + geom_violin(fill = "#0099ffbb",
draw_quantiles = c(0.5)) +
labs(x = "Stringency Category",
y = "Daily Cases",
title = "New York Stringency Comparison") +
theme_linedraw()
# create California ggplot object...
f <- ggplot(data = CA, aes(x = CA$stringency_category,
y = CA$daily_cases))
# create box plot for California...
f + geom_boxplot(fill="#ff0055bb") +
labs(x = "Stringency Catgegory",
y = "Daily Cases",
title = "California Stringency Comparison") +
theme_linedraw()
# create violin plot for California...
f + geom_violin(fill = "#ff0055bb",
draw_quantiles = c(0.5)) +
labs(x = "Stringency Category",
y = "Daily Cases",
title = "California Stringency Comparison") +
theme_linedraw()
# create Florida ggplot object...
f <- ggplot(data = FL, aes(x = FL$stringency_category,
y = FL$daily_cases))
# create box plot for Florida...
f + geom_boxplot(fill="#bb3377bb") +
labs(x = "Stringency Category",
y = "Daily Cases",
title = "Florida Stringency Comparison") +
theme_linedraw()
# create violin plot for Florida...
f + geom_violin(fill = "#bb3377bb",
draw_quantiles = c(0.5)) +
labs(x = "Stringency Category",
y = "Daily Cases",
title = "Florida Stringency Comparison") +
theme_linedraw()
# loop through each state and create strict_larger_mean ttest objects for each...
for (index in state_indices) {
assign(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"),
t.test(get(paste(state.abb[index], "strict", sep = "_")),
get(paste(state.abb[index], "lenient", sep = "_")),
alternative = "greater")
)
}
# loop through each state and create strict_larger_mean ttest objects for each...
for (index in state_indices) {
assign(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"),
t.test(get(paste(state.abb[index], "strict", sep = "_"))$daily_cases,
get(paste(state.abb[index], "lenient", sep = "_"))$daily_cases,
alternative = "greater")
)
}
# populate lenient_smaller and lenient_not_smaller vectors for each level of significance...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_medium_alpha_states[length(lenient_smaller_mean_medium_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_small_alpha_states[length(lenient_smaller_mean_small_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_medium_alpha_states[length(lenient_smaller_mean_medium_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
}
else {
lenient_not_smaller_states[length(lenient_not_smaller_states) + 1] <- state.abb[index]
}
}
# also create lenient_not_smaller vector...
lenient_not_smaller_states <- vector()
lenient_smaller_mean_small_alpha_states <- vector()
lenient_smaller_mean_middle_alpha_states <- vector()
lenient_smaller_mean_large_alpha_states <- vector()
# also create lenient_not_smaller vector...
lenient_not_smaller_states <- vector()
# populate lenient_smaller and lenient_not_smaller vectors for each level of significance...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_medium_alpha_states[length(lenient_smaller_mean_medium_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_small_alpha_states[length(lenient_smaller_mean_small_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_medium_alpha_states[length(lenient_smaller_mean_medium_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
}
else {
lenient_not_smaller_states[length(lenient_not_smaller_states) + 1] <- state.abb[index]
}
}
lenient_smaller_mean_small_alpha_states <- vector()
lenient_smaller_mean_middle_alpha_states <- vector()
lenient_smaller_mean_large_alpha_states <- vector()
# also create lenient_not_smaller vector...
lenient_not_smaller_states <- vector()
# populate lenient_smaller and lenient_not_smaller vectors for each level of significance...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_medium_alpha_states[length(lenient_smaller_mean_middle_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_small_alpha_states[length(lenient_smaller_mean_small_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_medium_alpha_states[length(lenient_smaller_mean_middle_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
}
else {
lenient_not_smaller_states[length(lenient_not_smaller_states) + 1] <- state.abb[index]
}
}
lenient_smaller_mean_small_alpha_states <- vector()
lenient_smaller_mean_middle_alpha_states <- vector()
lenient_smaller_mean_large_alpha_states <- vector()
# also create lenient_not_smaller vector...
lenient_not_smaller_states <- vector()
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_middle_alpha_states[length(lenient_smaller_mean_middle_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_small_alpha_states[length(lenient_smaller_mean_small_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_smaller_mean_middle_alpha_states[length(lenient_smaller_mean_middle_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
lenient_smaller_mean_large_alpha_states[length(lenient_smaller_mean_large_alpha_states) + 1] <- state.abb[index]
}
else {
lenient_not_smaller_states[length(lenient_not_smaller_states) + 1] <- state.abb[index]
}
}
# calculate alpha = 0.01 (low) percentage of states with difference...
lenient_smaller_small_alpha_percentage <- length(lenient_smaller_small_alpha_percentage) / 50.0
# calculate alpha = 0.05 (mid) percentage of states with difference...
lenient_smaller_middle_alpha_percentage <- length(lenient_smaller_mean_middle_alpha_states) / 50.0
# calculate alpha = 0.10 (high) percentage of states with difference...
lenient_smaller_large_alpha_percentage <- length(lenient_smaller_large_alpha_percentage) / 50.0
# print results...
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.01:",
lenient_smaller_small_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.05:",
lenient_smaller_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.10:",
lenient_smaller_large_alpha_percentage,
sep = " "))
# calculate alpha = 0.01 (low) percentage of states with difference...
lenient_smaller_small_alpha_percentage <- length(lenient_smaller_mean_small_alpha_states) / 50.0
# calculate alpha = 0.05 (mid) percentage of states with difference...
lenient_smaller_middle_alpha_percentage <- length(lenient_smaller_mean_middle_alpha_states) / 50.0
# calculate alpha = 0.10 (high) percentage of states with difference...
lenient_smaller_large_alpha_percentage <- length(lenient_smaller_mean_large_alpha_states) / 50.0
# print results...
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.01:",
lenient_smaller_small_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.05:",
lenient_smaller_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.10:",
lenient_smaller_large_alpha_percentage,
sep = " "))
lenient_larger_mean_small_alpha_states <- vector()
lenient_larger_mean_middle_alpha_states <- vector()
lenient_larger_mean_large_alpha_states <- vector()
# also create lenient_not_smaller vector...
lenient_not_larger_states <- vector()
# loop through each state and create strict_larger_mean ttest objects for each...
for (index in state_indices) {
assign(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"),
t.test(get(paste(state.abb[index], "strict", sep = "_"))$daily_cases,
get(paste(state.abb[index], "lenient", sep = "_"))$daily_cases,
alternative = "less")
)
}
# populate lenient_smaller and lenient_not_smaller vectors for each level of significance...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
lenient_larger_mean_large_alpha_states[length(lenient_larger_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_larger_mean_middle_alpha_states[length(lenient_larger_mean_middle_alpha_states) + 1] <- state.abb[index]
lenient_larger_mean_small_alpha_states[length(lenient_larger_mean_small_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
lenient_larger_mean_large_alpha_states[length(lenient_larger_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_larger_mean_middle_alpha_states[length(lenient_larger_mean_middle_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_larger_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
lenient_larger_mean_large_alpha_states[length(lenient_larger_mean_large_alpha_states) + 1] <- state.abb[index]
}
else {
lenient_not_larger_states[length(lenient_not_larger_states) + 1] <- state.abb[index]
}
}
# calculate alpha = 0.01 (low) percentage of states with difference...
lenient_larger_small_alpha_percentage <- length(lenient_larger_mean_small_alpha_states) / 50.0
# calculate alpha = 0.05 (mid) percentage of states with difference...
lenient_larger_middle_alpha_percentage <- length(lenient_larger_mean_middle_alpha_states) / 50.0
# calculate alpha = 0.10 (high) percentage of states with difference...
lenient_larger_large_alpha_percentage <- length(lenient_larger_mean_large_alpha_states) / 50.0
# print results...
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.01:",
lenient_larger_mean_small_alpha_states,
sep = " "))
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.05:",
lenient_larger_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.10:",
lenient_larger_large_alpha_percentage,
sep = " "))
# print results...
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.01:",
lenient_larger_small_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.05:",
lenient_larger_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.10:",
lenient_larger_large_alpha_percentage,
sep = " "))
# print results...
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.01:",
lenient_smaller_small_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.05:",
lenient_smaller_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with smaller lenient data average daily cases at alpha = 0.10:",
lenient_smaller_large_alpha_percentage,
sep = " "))
lenient_larger_mean_small_alpha_states <- vector()
lenient_larger_mean_middle_alpha_states <- vector()
lenient_larger_mean_large_alpha_states <- vector()
# also create lenient_not_smaller vector...
lenient_not_larger_states <- vector()
# loop through each state and create strict_larger_mean ttest objects for each...
for (index in state_indices) {
assign(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"),
t.test(get(paste(state.abb[index], "strict", sep = "_"))$daily_cases,
get(paste(state.abb[index], "lenient", sep = "_"))$daily_cases,
alternative = "less")
)
}
# populate lenient_smaller and lenient_not_smaller vectors for each level of significance...
for (index in state_indices) {
if (get(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"))$p.value < 0.01) {
lenient_larger_mean_large_alpha_states[length(lenient_larger_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_larger_mean_middle_alpha_states[length(lenient_larger_mean_middle_alpha_states) + 1] <- state.abb[index]
lenient_larger_mean_small_alpha_states[length(lenient_larger_mean_small_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"))$p.value < 0.05) {
lenient_larger_mean_large_alpha_states[length(lenient_larger_mean_large_alpha_states) + 1] <- state.abb[index]
lenient_larger_mean_middle_alpha_states[length(lenient_larger_mean_middle_alpha_states) + 1] <- state.abb[index]
}
else if (get(paste(state.abb[index], "strict_smaller_mean_ttest_obj", sep = "_"))$p.value < 0.10) {
lenient_larger_mean_large_alpha_states[length(lenient_larger_mean_large_alpha_states) + 1] <- state.abb[index]
}
else {
lenient_not_larger_states[length(lenient_not_larger_states) + 1] <- state.abb[index]
}
}
# calculate alpha = 0.01 (low) percentage of states with difference...
lenient_larger_small_alpha_percentage <- length(lenient_larger_mean_small_alpha_states) / 50.0
# calculate alpha = 0.05 (mid) percentage of states with difference...
lenient_larger_middle_alpha_percentage <- length(lenient_larger_mean_middle_alpha_states) / 50.0
# calculate alpha = 0.10 (high) percentage of states with difference...
lenient_larger_large_alpha_percentage <- length(lenient_larger_mean_large_alpha_states) / 50.0
# print results...
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.01:",
lenient_larger_small_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.05:",
lenient_larger_middle_alpha_percentage,
sep = " "))
print(paste("Percentage of US states with larger lenient data average daily cases at alpha = 0.10:",
lenient_larger_large_alpha_percentage,
sep = " "))
