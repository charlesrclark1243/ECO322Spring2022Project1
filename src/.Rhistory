}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
setnames(city_dt,
old = col_name,
new = paste(tostring(col_name, width = 0),
tostring(city_dt$City, width = 0),
sep = "_")
)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
setnames(city_dt,
old = col_name,
new = paste(toString(col_name, width = 0),
toString(city_dt$City, width = 0),
sep = "_")
)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
setnames(city_dt,
old = col_name,
new = paste(col_name,
city_dt$City[1],
sep = "_")
)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols(NYC_trimmed, "NYC")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
setnames(city_dt,
old = col_name,
new = paste(col_name,
city_name,
sep = "_")
)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed, "NYC")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
setnames(city_dt,
old = c(col_name),
new = c(paste(col_name,
city_name,
sep = "_")
)
)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed, "NYC")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
new_name <- paste(col_name,
city_dt$City[1],
sep = "_")
print(new_name)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed, "NYC")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
new_name <- paste(col_name,
city_dt$City[1, ],
sep = "_")
print(new_name)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed, "NYC")
print(NYC$id[0])
print(NYC$id[1])
print(col_name)
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
print(col_name)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed, "NYC")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
print(col_name)
}
return(city_dt)
}
rename_specific_cols(NYC_trimmed, "NYC")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
print(col_name)
}
}
rename_specific_cols(NYC_trimmed, "hello")
rename_specific_cols <- function(city_dt, city_name){
cols_to_rename <- colnames(city_dt)[c(4:7)]
print(cols_to_rename)
}
rename_specific_cols(NYC_trimmed, "hello")
NYC_trimmed <- USA_trimmed[City == "New York City"]
rename_specific_cols <- function(city_dt){
cols_to_rename = colnames(city_dt)[c(4:7)]
print(cols_to_rename)
}
rename_specific_cols(NYC_trimmed, "hello")
rename_specific_cols(NYC_trimmed)
print(col_name)
rename_specific_cols <- function(city_dt){
cols_to_rename = colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
print(col_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename = colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name = city_dt$City[0]
print(city_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename = colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name = city_dt$City[1]
print(city_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- city_dt$City[1]
city_name_list <- str_split(city_name, " ")
city_name <- paste(city_name_list, collapse = "_")
print(city_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- city_dt$City[1]
city_name_list <- strsplit(city_name, " ")
city_name <- paste(city_name_list, collapse = "_")
print(city_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- city_dt$City[1]
city_name_list <- strsplit(city_name, " ")
print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste("", city_dt$City[1])
city_name_list <- strsplit(city_name, " ")
print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
city_name_list <- strsplit(city_name, " ")
print(city_name_list)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste("", city_dt$City[1])
typeof(city_name)
# city_name_list <- strsplit(city_name, " ")
# print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste("", city_dt$City[1])
print(typeof(city_name))
# city_name_list <- strsplit(city_name, " ")
# print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste("", city_dt$City[1])
print(city_name)
# city_name_list <- strsplit(city_name, " ")
# print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste("", city_dt$City[1])
print(city_name[1])
# city_name_list <- strsplit(city_name, " ")
# print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste(city_dt$City[1])
print(city_name[1])
# city_name_list <- strsplit(city_name, " ")
# print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste(city_dt$City[1])
print(paste(city_name, collapse = ""))
# city_name_list <- strsplit(city_name, " ")
# print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
}
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste(city_dt$City[1])
print(paste(city_name, collapse = ""))
city_name_list <- strsplit(city_name, " ")
print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name <- paste(city_dt$City[1])
print(paste(city_name, collapse = ""))
city_name_list <- strsplit(city_name, " ")
print(paste(city_name_list, collapse = "_"))
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
print(strsplit(col_name, split = " "))
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(col_name$City[1])
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(City[1])
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(city_dt$City[1])
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(city_dt$City[1],
split = " ")
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(city_dt$City[1],
split = " ")
}
print(typeof(city_name_list))
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(city_dt$City[1],
split = " ")
}
print(typeof(city_name_list))
city_name <- paste(city_name_list,
collapse = "_")
print(typeof(city_name))
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- strsplit(city_dt$City[1],
split = " ")
}
print(typeof(city_name_list))
city_name <- paste(city_name_list,
collapse = "_")
print(typeof(city_name))
print(city_name)
}
rename_specific_cols(NYC_trimmed)
print(paste(c("a", "b", "c"), collapse = " "))
print(paste(strsplit("a b c"), collapse = "_"))
print(paste(strsplit("a b c", split = " "), collapse = "_"))
print(paste(c(strsplit("a b c", split = " ")), collapse = "_"))
print(c(strsplit("a b c", split = " ")))
print(strsplit("a b c", split = " "))
print("a b c")
print(c("a", "b", "c"))
print(as.vector(strsplit(c("a b c"), split = " ")))
# follow macOS instructions in txt file.
install.packages("stringr")
# QIUSHI: if you're using a macOS system and get an error when running...
# library(data.table)...
# let me know... spent the better part of a day trying to get it to work...
# so I might be able to help, but hopefully it isn't a problem.
library(stringr)
print(as.vector(str_split_fixed("a b c", pattern = " ", n = nchar(c("a b c")))))
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- as.vector(str_split_fixed(city_dt$City[1],
pattern = " ",
n = nchar(city_dt$City[1])))
print(city_name_list)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- as.vector(str_split_fixed(city_dt$City[1],
pattern = " ",
n = nchar(city_dt$City[1])))
city_name <- paste(city_name_list, collapse = "")
print(city_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- as.vector(str_split_fixed(city_dt$City[1],
pattern = " ",
n = nchar(city_dt$City[1])))
city_name <- paste(city_name_list, collapse = "")
new_col_name <- paste(col_name, city_name, sep = "")
print(new_col_name)
}
}
rename_specific_cols(NYC_trimmed)
rename_specific_cols <- function(city_dt){
cols_to_rename <- colnames(city_dt)[c(4:7)]
for (col_name in cols_to_rename) {
city_name_list <- as.vector(str_split_fixed(city_dt$City[1],
pattern = " ",
n = nchar(city_dt$City[1])))
city_name <- paste(city_name_list, collapse = "")
new_col_name <- paste(col_name, city_name, sep = "")
setnames(city_dt,
old = col_name,
new = new_col_name)
}
}
rename_specific_cols(NYC_trimmed)
print(colnames(NYC_trimmed))
rename_specific_cols(NYC_trimmed)
rename_specific_cols(LA_trimmed) #  <- USA_trimmed[City == "Los Angeles"]
rename_specific_cols(SF_trimmed) # <- USA_trimmed[City == "San Francisco"]
rename_specific_cols(HOUS_trimmed) # <- USA_trimmed[City == "Houston" & State == "Texas"]
rename_specific_cols(DALLAS_trimmed) # <- USA_trimmed[City == "Dallas" & State == "Texas"]
rename_specific_cols(MIAMI_trimmed) # <- USA_trimmed[City == "Miami-Dade" & State == "Florida"]
rename_specific_cols(SEAT_trimmed) # <- USA_trimmed[City == "King" & State == "Washington"] #contains Seattle
rename_specific_cols(CHARLOTTE_trimmed) # <- USA_trimmed[City == "Mecklenburg" & State == "North Carolina"]
rename_specific_cols(FT_LAUD_trimmed) # <- USA_trimmed[City == "Broward"] #watch for city overlap --contains Fort Lauderdale
rename_specific_cols(ST_LOU_trimmed) # <- USA_trimmed[City == "St. Louis" & State == "Missouri"]
rename_specific_cols(BATON_trimmed) # <- USA_trimmed[City == "East Baton Rouge"]
rename_specific_cols(ORLEANS_trimmed) # <- USA_trimmed[City == "Orleans" & State == "Louisiana"]
rename_specific_cols(DAVIDSON_trimmed) # <- USA_trimmed[City == "Davidson" & State == "Tennessee"] #contains nashville
rename_specific_cols(ORANGE_trimmed) # <- USA_trimmed[City == "Orange" & State == "Florida"] #has Orlando
rename_specific_cols(PHIL_trimmed) # <- USA_trimmed[City == "Philadelphia" & State == "Pennsylvania"]
rename_specific_cols(COOK_trimmed) # <- USA_trimmed[City == "Cook"  & State == "Illinois"] #Contains Chicago
rename_specific_cols(DETROIT_trimmed) # <- USA_trimmed[City == "Wayne" & State == "Michigan"] #contains Detroit
rename_specific_cols(MILWAUKEE_trimmed) #  <- USA_trimmed[City == "Milwaukee" & State == "Wisconsin"]
rename_specific_cols(AUSTIN_trimmed) # <- USA_trimmed[City == "Austin" & State == "Texas"]
rename_specific_cols(SAN_DIEGO_trimmed) # <- USA_trimmed[City== "San Diego" & State == "California"]
library(COVID19)
library(data.table)
library(data.table)
# remove all previously existing environment variables...
rm(list=ls())
rm(list=ls())
# Charlie's path...
cRoot <- "~"
cPathOut <- file.path(cRoot, "Users", "charlieclark", "Documents", "GitHub", "ECO322Spring2022Project1")
pathOut <- cPathOut # REPLACE WITH YOUR OWN PATH OUT VARIABLE!!!
library(COVID19)
library(data.table)
USA <- covid19( country = c("United States") , level = 2, verbose = FALSE)
View(USA[1:100, ])
USA[, c("administrative_area_level_1", "administrative_area_level_3") := c(NULL, NULL)]
setDT(USA)
type(USA)
is.data.table(USA)
USA[, c("administrative_area_level_1", "administrative_area_level_3") := c(NULL, NULL)]
setnames(USA, c("administrative_area_level_2"), c("state"))
colnames(USA)
# keys...
setkeyv(USA, c("state", "date"))
key(USA)
USA[, previous := shift(confirmed, 1, fill = NA_integer_), by = state]
view(USA[1:100, ])
View(USA[1:100, ])
# create daily_cases feature by subtracting previous from current...
USA[, daily_cases := confirmed - previous]
View(USA[1:100, ])
# delete lagged feature...
USA[, previous := NULL]
View(USA)
colnames(USA)
USA <- USA[, c("date", "state", "daily_cases", "stringency_index")]
View(USA)
USA <- USA[date>="2021-01-01" & date<="2021-12-31", ]
View(USA)
USA <- USA[date>="2021-01-01" & date<="2021-12-31" & state="Alabama", ]
View(USA[state == "Alabama", ])
CA <- USA[state = "California", ]
CA <- USA[state == "California", ]
# calculate average stringency_index
CA[, .(CA_avg_stringency_index = mean(CA$stringency_index))]
# calculate average stringency_index
CA_avg_stringency_index <- CA[, .(CA_avg_stringency_index = mean(CA$stringency_index))]
# calculate average stringency_index
CA_avg_stringency_index <- CA[, .(avg = mean(stringency_index))]
# create categorical feature based on average stringency index...
CA[, stringency_category := CA_avg_stringency_index]
# create categorical feature based on average stringency index...
CA[, stringency_category := CA_avg_stringency_index]
# create categorical feature based on average stringency index...
CA[, stringency_category := CA_avg_stringency_index$avg]
rm(ls(CA))
rm(ls("CA"))
rm(list=ls("CA"))
rm(list=ls(CA))
# create CA data.table...
CA <- USA[state == "California", ]
# calculate average stringency_index
CA_avg_stringency_index <- mean(CA$stringency_index)
# create categorical feature based on average stringency index...
CA[, stringency_category := CA_avg_stringency_index]
# calculate average stringency_index
CA_avg_stringency_index <- mean(CA$stringency_index)
# create categorical feature based on average stringency index...
CA[, stringency_category := CA_avg_stringency_index$avg]
# create categorical feature based on average stringency index...
CA[, stringency_category := CA_avg_stringency_index]
View(CA)
# create CA data.table...
CA <- USA[state == "California", ]
# calculate average stringency_index
CA_avg_stringency_index <- mean(CA$stringency_index)
# create separate data.tables based on a comparison to average_stringency_index...
CA_lenient <- CA[stringency_index <= CA_avg_stringency_index]
CA_strict <- CA[stringency_index > CA_avg_stringency_index]
# calculate average of daily_cases for the two data.tables...
CA_lenient_avg_daily_cases <- mean(CA_lenient$daily_cases)
CA_strict_avg_daily_cases <- mean(CA_strict$daily_cases)
# hypothesis test...
t.test(CA_lenient$daily_cases, CA_strict$daily_cases)
